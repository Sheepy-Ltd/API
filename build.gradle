import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
    id 'maven'
    id 'application'
    id 'java-library'
    id 'maven-publish'

    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'net.nemerosa.versioning' version '2.8.2'
    id 'net.kyori.blossom' version '1.1.0'
}

def git = versioning.info
def ver = new Version(major: 2, minor: 5, patch: 14, build: git.build)

//def buildAuthor = System.getProperty('user.name')
def buildDate = ZonedDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy 'at' HH:mm:ss.SSS zZ"))

group = 'com.sheepybot'
version = ver.toString()

mainClassName = group + '.Bot'

shadowJar {
    archiveFileName = "API.jar"
}

description = ''

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.sheepybot.Bot'
        )
    }
}

repositories {
    mavenCentral()
    jcenter()
    
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation (group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3') {
        exclude(group: 'org.slf4j', module: 'slf4j-api')
    }
    implementation (group: 'com.zaxxer', name: 'HikariCP', version: '3.4.5') {
        exclude(group: 'org.slf4j', module: 'slf4j-api')
    }
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.1'
    implementation (group: 'com.sedmelluq', name: 'jda-nas', version: '1.1.0') {
        exclude(group: 'org.slf4j', module: 'slf4j-api')
        exclude(group: 'commons-io', module: 'commons-io')
    }

    api group: 'org.jetbrains', name: 'annotations', version: '20.1.0'
    api group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    api group: 'com.sedmelluq', name: 'lavaplayer', version: '1.3.65'
    api (group: 'com.moandjiezana.toml', name: 'toml4j', version: '0.7.2') {
        exclude(group: 'com.google.code.gson', module: 'gson')
    }
    api (group: 'com.github.FredBoat', name: 'Lavalink-Client', version: '7492a36d20') {
        exclude(group: 'org.slf4j', module: 'slf4j-api')
        exclude(group: 'com.sedmelluq', module: 'lavaplayer')
    }
    api (group: 'net.dv8tion', name: 'JDA', version: '4.2.0_223') {
        exclude(group: 'org.slf4j', module: 'slf4j-api')
    }
    api (group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.6')
}

//my attempt at bintray, im new to this so hope it works

//publishing {
//    publications {
//        API (MavenPublication) {
//            from components.java
//            groupId 'com.sheepybot'
//            artifactId 'API'
//            version ver.toString()
//        }
//    }
//}
//
//bintray {
//    user = "$bintrayUser"
//    key = "$bintrayApiKey"
//    publications = ['API']
//    publish = true
//    pkg {
//        repo = 'maven'
//        name = 'API'
//        userOrg = 'Sheepy-Ltd'
//        websiteUrl = 'https://sheepybot.com/'
//        licenses = ['Apache-2.0']
//        vcsUrl = 'https://github.com/Sheepy-Ltd/API.git'
//        version {
//            name = ver.toString()
//            released = buildDate
//            gpg {
//                sign = true
//                passphrase = "$gpgPassphrase"
//            }
//        }
//    }
//}

blossom {
    def file = 'src/main/java/com/sheepybot/BotInfo.java'

    replaceToken '@version_major@', ver.major, file
    replaceToken '@version_minor@', ver.minor, file
    replaceToken '@version_patch@', ver.patch, file

    replaceToken '@version_build@', ver.build, file

//    replaceToken '@build_author@', buildAuthor, file
    replaceToken '@build_date@', buildDate, file

    replaceToken '@git_branch@', git.branch, file
    replaceToken '@git_commit@', git.commit, file
}

final class Version {

    String major
    String minor
    String patch
    String build

    @Override
    String toString() {
        return String.format("%s.%s.%s_%s", major, minor, patch, build)
    }
}